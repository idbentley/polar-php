<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


/**
 * WebhookSubscriptionUpdatedPayload - Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.
 *
 *
 * If you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.
 *
 * To listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.
 *
 * **Discord & Slack support:** On cancellation and revocation. Renewals are skipped.
 */
class WebhookSubscriptionUpdatedPayload
{
    /**
     *
     * @var Subscription $data
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('data')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Subscription')]
    public Subscription $data;

    /**
     *
     * @var WebhookSubscriptionUpdatedPayloadType $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\WebhookSubscriptionUpdatedPayloadType')]
    public WebhookSubscriptionUpdatedPayloadType $type;

    /**
     * @param  WebhookSubscriptionUpdatedPayloadType  $type
     * @param  Subscription  $data
     */
    public function __construct(Subscription $data, WebhookSubscriptionUpdatedPayloadType $type = WebhookSubscriptionUpdatedPayloadType::SubscriptionUpdated)
    {
        $this->data = $data;
        $this->type = $type;
    }
}